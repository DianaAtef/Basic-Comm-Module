
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000b52  00000be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080006e  0080006e  00000bf4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4b  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a1  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000810  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000543  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  8a:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bcm_TxFinished>:
		}
		

	}
	
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
  9e:	00 00       	nop
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <Bcm_RxFinished>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
  bc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <rxindex>
  c0:	08 2f       	mov	r16, r24
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	0e 94 93 03 	call	0x726	; 0x726 <getUdrValue>
  c8:	28 2f       	mov	r18, r24
  ca:	c8 01       	movw	r24, r16
  cc:	86 57       	subi	r24, 0x76	; 118
  ce:	9f 4f       	sbci	r25, 0xFF	; 255
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <rxindex>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <rxindex>
  de:	00 00       	nop
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	08 95       	ret

000000ea <BCM_Init>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	89 e4       	ldi	r24, 0x49	; 73
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TxSetCallBack>
  fa:	83 e5       	ldi	r24, 0x53	; 83
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 0f 02 	call	0x41e	; 0x41e <RxSetCallBack>
 102:	81 e6       	ldi	r24, 0x61	; 97
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 6d 02 	call	0x4da	; 0x4da <UART_Init>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <BCM_Setup_Receive>:
* Description: to configure receive buffer structure
*
***************************************************************************/

EnmBCMError_t BCM_Setup_Receive(uint8 id, uint8* address,uint8 length)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <BCM_Setup_Receive+0x6>
 118:	00 d0       	rcall	.+0      	; 0x11a <BCM_Setup_Receive+0x8>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	7b 83       	std	Y+3, r23	; 0x03
 122:	6a 83       	std	Y+2, r22	; 0x02
 124:	4c 83       	std	Y+4, r20	; 0x04
	BcmArrayReceive.BufferId = id;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <BcmArrayReceive>
	BcmArrayReceive.address = address;
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	9b 81       	ldd	r25, Y+3	; 0x03
 130:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <BcmArrayReceive+0x2>
 134:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <BcmArrayReceive+0x1>
	BcmArrayReceive.length = length;
 138:	8c 81       	ldd	r24, Y+4	; 0x04
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <BcmArrayReceive+0x7>
 142:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <BcmArrayReceive+0x6>
	return BCM_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0

}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <BCM_RxDispatch>:
*
* Description: BCM rx Dispatcher
*
***************************************************************************/
EnmBCMError_t BCM_RxDispatch()
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	uint8 lError = BCM_OK;
 160:	19 82       	std	Y+1, r1	; 0x01
		
	#if 1

	if(RxCounter < counter)
 162:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <RxCounter>
 166:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 16a:	98 17       	cp	r25, r24
 16c:	08 f0       	brcs	.+2      	; 0x170 <BCM_RxDispatch+0x1a>
 16e:	22 c1       	rjmp	.+580    	; 0x3b4 <BCM_RxDispatch+0x25e>
	{
		
		
		RxCounter++;
 170:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <RxCounter>
		
		if(RxCounter==1)
 17a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	19 f4       	brne	.+6      	; 0x188 <BCM_RxDispatch+0x32>
		{
			
			BcmArrayReceive.lock=LOCK;
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <BcmArrayReceive+0x4>
 186:	16 c1       	rjmp	.+556    	; 0x3b4 <BCM_RxDispatch+0x25e>
			
		}
		else if(RxCounter>0 && RxCounter <= counter)
 188:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 18c:	88 23       	and	r24, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <BCM_RxDispatch+0x3c>
 190:	11 c1       	rjmp	.+546    	; 0x3b4 <BCM_RxDispatch+0x25e>
 192:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <RxCounter>
 196:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 19a:	89 17       	cp	r24, r25
 19c:	08 f4       	brcc	.+2      	; 0x1a0 <BCM_RxDispatch+0x4a>
 19e:	0a c1       	rjmp	.+532    	; 0x3b4 <BCM_RxDispatch+0x25e>
		{
			if(RxCounter == 2)
 1a0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	c1 f5       	brne	.+112    	; 0x218 <BCM_RxDispatch+0xc2>
			{
				
				if(RxBuffer[RxCounter-1] == BcmArrayReceive.BufferId)
 1a8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	86 57       	subi	r24, 0x76	; 118
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	fc 01       	movw	r30, r24
 1b8:	90 81       	ld	r25, Z
 1ba:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <BcmArrayReceive>
 1be:	98 17       	cp	r25, r24
 1c0:	d1 f4       	brne	.+52     	; 0x1f6 <BCM_RxDispatch+0xa0>
				{
					
					*(BcmArrayReceive.address) = BcmArrayReceive.BufferId;
 1c2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 1c6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 1ca:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <BcmArrayReceive>
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
					UART_Send(*(BcmArrayReceive.address));
 1d2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 1d6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_Send>
					BcmArrayReceive.address++;
 1e2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 1e6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <BcmArrayReceive+0x2>
 1f0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <BcmArrayReceive+0x1>
 1f4:	df c0       	rjmp	.+446    	; 0x3b4 <BCM_RxDispatch+0x25e>
				}
				else if(RxBuffer[RxCounter-1] != BcmArrayReceive.BufferId)
 1f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	86 57       	subi	r24, 0x76	; 118
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	fc 01       	movw	r30, r24
 206:	90 81       	ld	r25, Z
 208:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <BcmArrayReceive>
 20c:	98 17       	cp	r25, r24
 20e:	09 f4       	brne	.+2      	; 0x212 <BCM_RxDispatch+0xbc>
 210:	d1 c0       	rjmp	.+418    	; 0x3b4 <BCM_RxDispatch+0x25e>
				{
					lError = BCM_NOK;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 83       	std	Y+1, r24	; 0x01
 216:	ce c0       	rjmp	.+412    	; 0x3b4 <BCM_RxDispatch+0x25e>
				}
			}
			else if(RxCounter == 3)
 218:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f0       	breq	.+2      	; 0x222 <BCM_RxDispatch+0xcc>
 220:	43 c0       	rjmp	.+134    	; 0x2a8 <BCM_RxDispatch+0x152>
			{
				if(RxBuffer[RxCounter-1] <= BcmArrayReceive.length)
 222:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	86 57       	subi	r24, 0x76	; 118
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <BcmArrayReceive+0x6>
 23c:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <BcmArrayReceive+0x7>
 240:	82 17       	cp	r24, r18
 242:	93 07       	cpc	r25, r19
 244:	e0 f0       	brcs	.+56     	; 0x27e <BCM_RxDispatch+0x128>
				{
					*(BcmArrayReceive.address) = BcmArrayReceive.length;
 246:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 24a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 24e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <BcmArrayReceive+0x6>
 252:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <BcmArrayReceive+0x7>
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
					
					UART_Send(*(BcmArrayReceive.address));
 25a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 25e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_Send>
					BcmArrayReceive.address ++;
 26a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 26e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <BcmArrayReceive+0x2>
 278:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <BcmArrayReceive+0x1>
 27c:	9b c0       	rjmp	.+310    	; 0x3b4 <BCM_RxDispatch+0x25e>
					
				}
				else if(RxBuffer[RxCounter] > BcmArrayReceive.length)
 27e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 282:	88 2f       	mov	r24, r24
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	86 57       	subi	r24, 0x76	; 118
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <BcmArrayReceive+0x6>
 296:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <BcmArrayReceive+0x7>
 29a:	82 17       	cp	r24, r18
 29c:	93 07       	cpc	r25, r19
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <BCM_RxDispatch+0x14c>
 2a0:	89 c0       	rjmp	.+274    	; 0x3b4 <BCM_RxDispatch+0x25e>
				{
					lError = BCM_NOK;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	86 c0       	rjmp	.+268    	; 0x3b4 <BCM_RxDispatch+0x25e>
				}
			}
			else if( Rx_Count < BcmArrayReceive.length )
 2a8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Rx_Count>
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <BcmArrayReceive+0x6>
 2b4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <BcmArrayReceive+0x7>
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	68 f5       	brcc	.+90     	; 0x318 <BCM_RxDispatch+0x1c2>
			{
				
				*(BcmArrayReceive.address) = RxBuffer[RxCounter-1];
 2be:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 2c2:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 2c6:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <RxCounter>
 2ca:	22 2f       	mov	r18, r18
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	31 09       	sbc	r19, r1
 2d2:	26 57       	subi	r18, 0x76	; 118
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
				BcmArrayReceive.address++;
 2de:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 2e2:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <BcmArrayReceive+0x2>
 2ec:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <BcmArrayReceive+0x1>
				Rx_Count ++;
 2f0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Rx_Count>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <Rx_Count>
				 BcmArrayReceive.checkSum += RxBuffer[(RxCounter-1)];
 2fa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 2fe:	88 2f       	mov	r24, r24
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	86 57       	subi	r24, 0x76	; 118
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <BcmArrayReceive+0x3>
 310:	89 0f       	add	r24, r25
 312:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <BcmArrayReceive+0x3>
 316:	4e c0       	rjmp	.+156    	; 0x3b4 <BCM_RxDispatch+0x25e>
				
			}
			else if(Rx_Count == (BcmArrayReceive.length))
 318:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <Rx_Count>
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <BcmArrayReceive+0x6>
 324:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <BcmArrayReceive+0x7>
 328:	28 17       	cp	r18, r24
 32a:	39 07       	cpc	r19, r25
 32c:	09 f0       	breq	.+2      	; 0x330 <BCM_RxDispatch+0x1da>
 32e:	42 c0       	rjmp	.+132    	; 0x3b4 <BCM_RxDispatch+0x25e>
			{ 
				if(RxBuffer[RxCounter-1] ==  BcmArrayReceive.checkSum)
 330:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	86 57       	subi	r24, 0x76	; 118
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	fc 01       	movw	r30, r24
 340:	90 81       	ld	r25, Z
 342:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <BcmArrayReceive+0x3>
 346:	98 17       	cp	r25, r24
 348:	39 f5       	brne	.+78     	; 0x398 <BCM_RxDispatch+0x242>
				{
					
					*(BcmArrayReceive.address) = RxBuffer[RxCounter-1];
 34a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <BcmArrayReceive+0x1>
 34e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <BcmArrayReceive+0x2>
 352:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <RxCounter>
 356:	22 2f       	mov	r18, r18
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	31 09       	sbc	r19, r1
 35e:	26 57       	subi	r18, 0x76	; 118
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	f9 01       	movw	r30, r18
 364:	20 81       	ld	r18, Z
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
					PORTB_DATA |= 0X10;
 36a:	88 e3       	ldi	r24, 0x38	; 56
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	28 e3       	ldi	r18, 0x38	; 56
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	20 61       	ori	r18, 0x10	; 16
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
					BcmArrayReceive.lock = UNLOCK;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <BcmArrayReceive+0x4>
					SREG &= ~(1<<7);
 382:	8f e5       	ldi	r24, 0x5F	; 95
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	2f e5       	ldi	r18, 0x5F	; 95
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	20 81       	ld	r18, Z
 38e:	2f 77       	andi	r18, 0x7F	; 127
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
					lError = BCM_OK;
 394:	19 82       	std	Y+1, r1	; 0x01
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <BCM_RxDispatch+0x25e>
				}
				else if(RxBuffer[RxCounter] != BcmArrayReceive.checkSum)
 398:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <RxCounter>
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	86 57       	subi	r24, 0x76	; 118
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	fc 01       	movw	r30, r24
 3a6:	90 81       	ld	r25, Z
 3a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <BcmArrayReceive+0x3>
 3ac:	98 17       	cp	r25, r24
 3ae:	11 f0       	breq	.+4      	; 0x3b4 <BCM_RxDispatch+0x25e>
				{		
					lError = BCM_NOK;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	89 83       	std	Y+1, r24	; 0x01
				
			}
		}
	}
	
	return lError;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
	#endif
}
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <main>:

uint8 Buffer[]={5,2,3,8,9,10,12,14};
uint8 Rxbuffer[10]={0};

int main(void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	BCM_Init();	
 3c6:	0e 94 75 00 	call	0xea	; 0xea <BCM_Init>
	BCM_Setup_Receive(1,Rxbuffer,5);
 3ca:	45 e0       	ldi	r20, 0x05	; 5
 3cc:	62 e7       	ldi	r22, 0x72	; 114
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 89 00 	call	0x112	; 0x112 <BCM_Setup_Receive>
    SET_BIT(SREG,I);
 3d6:	8f e5       	ldi	r24, 0x5F	; 95
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	2f e5       	ldi	r18, 0x5F	; 95
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	20 68       	ori	r18, 0x80	; 128
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
	PORTB_DIR=0XFF;
 3e8:	87 e3       	ldi	r24, 0x37	; 55
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
    while (1) 
    {	
		BCM_RxDispatch();
 3f2:	0e 94 ab 00 	call	0x156	; 0x156 <BCM_RxDispatch>
		
    }
 3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <main+0x34>

000003f8 <TxSetCallBack>:
			return E_OK;
		}

	}
	return E_NOT_OK;
}
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <TxSetCallBack+0x6>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	9a 83       	std	Y+2, r25	; 0x02
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <TxCall+0x1>
 40e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <TxCall>
 412:	00 00       	nop
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <RxSetCallBack>:
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <RxSetCallBack+0x6>
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	9a 83       	std	Y+2, r25	; 0x02
 42a:	89 83       	std	Y+1, r24	; 0x01
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <RxCall+0x1>
 434:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <RxCall>
 438:	00 00       	nop
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <__vector_15>:
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	8f 93       	push	r24
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_Txflag>
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_Txflag>
 464:	00 00       	nop
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	8f 91       	pop	r24
 46c:	0f 90       	pop	r0
 46e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_13>:
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <RxCall>
 4a8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <RxCall+0x1>
 4ac:	fc 01       	movw	r30, r24
 4ae:	09 95       	icall
 4b0:	00 00       	nop
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <UART_Init>:
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <UART_Init+0xe>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <UART_Init+0x10>
 4ea:	1f 92       	push	r1
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	9d 83       	std	Y+5, r25	; 0x05
 4f2:	8c 83       	std	Y+4, r24	; 0x04
 4f4:	8c 81       	ldd	r24, Y+4	; 0x04
 4f6:	9d 81       	ldd	r25, Y+5	; 0x05
 4f8:	fc 01       	movw	r30, r24
 4fa:	80 85       	ldd	r24, Z+8	; 0x08
 4fc:	91 85       	ldd	r25, Z+9	; 0x09
 4fe:	a2 85       	ldd	r26, Z+10	; 0x0a
 500:	b3 85       	ldd	r27, Z+11	; 0x0b
 502:	bc 01       	movw	r22, r24
 504:	cd 01       	movw	r24, r26
 506:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 50a:	6b 01       	movw	r12, r22
 50c:	7c 01       	movw	r14, r24
 50e:	8c 81       	ldd	r24, Y+4	; 0x04
 510:	9d 81       	ldd	r25, Y+5	; 0x05
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	91 81       	ldd	r25, Z+1	; 0x01
 518:	a2 81       	ldd	r26, Z+2	; 0x02
 51a:	b3 81       	ldd	r27, Z+3	; 0x03
 51c:	bc 01       	movw	r22, r24
 51e:	cd 01       	movw	r24, r26
 520:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 524:	dc 01       	movw	r26, r24
 526:	cb 01       	movw	r24, r22
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 e8       	ldi	r20, 0x80	; 128
 52e:	51 e4       	ldi	r21, 0x41	; 65
 530:	bc 01       	movw	r22, r24
 532:	cd 01       	movw	r24, r26
 534:	0e 94 3a 05 	call	0xa74	; 0xa74 <__mulsf3>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	9c 01       	movw	r18, r24
 53e:	ad 01       	movw	r20, r26
 540:	c7 01       	movw	r24, r14
 542:	b6 01       	movw	r22, r12
 544:	0e 94 0b 04 	call	0x816	; 0x816 <__divsf3>
 548:	dc 01       	movw	r26, r24
 54a:	cb 01       	movw	r24, r22
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	40 e8       	ldi	r20, 0x80	; 128
 552:	5f e3       	ldi	r21, 0x3F	; 63
 554:	bc 01       	movw	r22, r24
 556:	cd 01       	movw	r24, r26
 558:	0e 94 9e 03 	call	0x73c	; 0x73c <__subsf3>
 55c:	dc 01       	movw	r26, r24
 55e:	cb 01       	movw	r24, r22
 560:	bc 01       	movw	r22, r24
 562:	cd 01       	movw	r24, r26
 564:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	9b 83       	std	Y+3, r25	; 0x03
 56e:	8a 83       	std	Y+2, r24	; 0x02
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	89 83       	std	Y+1, r24	; 0x01
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	fc 01       	movw	r30, r24
 57a:	87 81       	ldd	r24, Z+7	; 0x07
 57c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <g_interrupt>
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	9d 81       	ldd	r25, Y+5	; 0x05
 584:	fc 01       	movw	r30, r24
 586:	87 81       	ldd	r24, Z+7	; 0x07
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	91 f4       	brne	.+36     	; 0x5b0 <UART_Init+0xd6>
 58c:	8a e2       	ldi	r24, 0x2A	; 42
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	2a e2       	ldi	r18, 0x2A	; 42
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	20 68       	ori	r18, 0x80	; 128
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
 59e:	8a e2       	ldi	r24, 0x2A	; 42
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2a e2       	ldi	r18, 0x2A	; 42
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	20 64       	ori	r18, 0x40	; 64
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
 5b0:	8a e2       	ldi	r24, 0x2A	; 42
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2a e2       	ldi	r18, 0x2A	; 42
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	28 60       	ori	r18, 0x08	; 8
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
 5c2:	8a e2       	ldi	r24, 0x2A	; 42
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	2a e2       	ldi	r18, 0x2A	; 42
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	20 81       	ld	r18, Z
 5ce:	20 61       	ori	r18, 0x10	; 16
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
 5d4:	8c 81       	ldd	r24, Y+4	; 0x04
 5d6:	9d 81       	ldd	r25, Y+5	; 0x05
 5d8:	fc 01       	movw	r30, r24
 5da:	85 81       	ldd	r24, Z+5	; 0x05
 5dc:	88 2f       	mov	r24, r24
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	91 05       	cpc	r25, r1
 5e4:	61 f0       	breq	.+24     	; 0x5fe <UART_Init+0x124>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	91 05       	cpc	r25, r1
 5ea:	81 f0       	breq	.+32     	; 0x60c <UART_Init+0x132>
 5ec:	89 2b       	or	r24, r25
 5ee:	91 f4       	brne	.+36     	; 0x614 <UART_Init+0x13a>
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	8f 7d       	andi	r24, 0xDF	; 223
 5f4:	89 83       	std	Y+1, r24	; 0x01
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	8f 7e       	andi	r24, 0xEF	; 239
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <UART_Init+0x13e>
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	80 62       	ori	r24, 0x20	; 32
 602:	89 83       	std	Y+1, r24	; 0x01
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	80 61       	ori	r24, 0x10	; 16
 608:	89 83       	std	Y+1, r24	; 0x01
 60a:	06 c0       	rjmp	.+12     	; 0x618 <UART_Init+0x13e>
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	02 c0       	rjmp	.+4      	; 0x618 <UART_Init+0x13e>
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	55 c0       	rjmp	.+170    	; 0x6c2 <UART_Init+0x1e8>
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	fc 01       	movw	r30, r24
 61e:	86 81       	ldd	r24, Z+6	; 0x06
 620:	88 2f       	mov	r24, r24
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	19 f0       	breq	.+6      	; 0x62e <UART_Init+0x154>
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	29 f0       	breq	.+10     	; 0x636 <UART_Init+0x15c>
 62c:	08 c0       	rjmp	.+16     	; 0x63e <UART_Init+0x164>
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	87 7f       	andi	r24, 0xF7	; 247
 632:	89 83       	std	Y+1, r24	; 0x01
 634:	06 c0       	rjmp	.+12     	; 0x642 <UART_Init+0x168>
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	02 c0       	rjmp	.+4      	; 0x642 <UART_Init+0x168>
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	40 c0       	rjmp	.+128    	; 0x6c2 <UART_Init+0x1e8>
 642:	8c 81       	ldd	r24, Y+4	; 0x04
 644:	9d 81       	ldd	r25, Y+5	; 0x05
 646:	fc 01       	movw	r30, r24
 648:	84 81       	ldd	r24, Z+4	; 0x04
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	91 05       	cpc	r25, r1
 652:	99 f0       	breq	.+38     	; 0x67a <UART_Init+0x1a0>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	91 05       	cpc	r25, r1
 658:	1c f4       	brge	.+6      	; 0x660 <UART_Init+0x186>
 65a:	89 2b       	or	r24, r25
 65c:	39 f0       	breq	.+14     	; 0x66c <UART_Init+0x192>
 65e:	1c c0       	rjmp	.+56     	; 0x698 <UART_Init+0x1be>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	91 05       	cpc	r25, r1
 664:	71 f0       	breq	.+28     	; 0x682 <UART_Init+0x1a8>
 666:	03 97       	sbiw	r24, 0x03	; 3
 668:	81 f0       	breq	.+32     	; 0x68a <UART_Init+0x1b0>
 66a:	16 c0       	rjmp	.+44     	; 0x698 <UART_Init+0x1be>
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	8d 7f       	andi	r24, 0xFD	; 253
 670:	89 83       	std	Y+1, r24	; 0x01
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	89 83       	std	Y+1, r24	; 0x01
 678:	11 c0       	rjmp	.+34     	; 0x69c <UART_Init+0x1c2>
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	82 60       	ori	r24, 0x02	; 2
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	0d c0       	rjmp	.+26     	; 0x69c <UART_Init+0x1c2>
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	84 60       	ori	r24, 0x04	; 4
 686:	89 83       	std	Y+1, r24	; 0x01
 688:	09 c0       	rjmp	.+18     	; 0x69c <UART_Init+0x1c2>
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	89 83       	std	Y+1, r24	; 0x01
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	84 60       	ori	r24, 0x04	; 4
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	02 c0       	rjmp	.+4      	; 0x69c <UART_Init+0x1c2>
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	13 c0       	rjmp	.+38     	; 0x6c2 <UART_Init+0x1e8>
 69c:	80 e4       	ldi	r24, 0x40	; 64
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	29 81       	ldd	r18, Y+1	; 0x01
 6a2:	fc 01       	movw	r30, r24
 6a4:	20 83       	st	Z, r18
 6a6:	89 e2       	ldi	r24, 0x29	; 41
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	2a 81       	ldd	r18, Y+2	; 0x02
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 83       	st	Z, r18
 6b0:	80 e4       	ldi	r24, 0x40	; 64
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	2a 81       	ldd	r18, Y+2	; 0x02
 6b6:	3b 81       	ldd	r19, Y+3	; 0x03
 6b8:	23 2f       	mov	r18, r19
 6ba:	33 27       	eor	r19, r19
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	08 95       	ret

000006da <UART_Send>:
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	1f 92       	push	r1
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <g_interrupt>
 6ea:	88 23       	and	r24, r24
 6ec:	91 f4       	brne	.+36     	; 0x712 <UART_Send+0x38>
 6ee:	00 00       	nop
 6f0:	8b e2       	ldi	r24, 0x2B	; 43
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	80 72       	andi	r24, 0x20	; 32
 6fe:	99 27       	eor	r25, r25
 700:	89 2b       	or	r24, r25
 702:	b1 f3       	breq	.-20     	; 0x6f0 <UART_Send+0x16>
 704:	8c e2       	ldi	r24, 0x2C	; 44
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	29 81       	ldd	r18, Y+1	; 0x01
 70a:	fc 01       	movw	r30, r24
 70c:	20 83       	st	Z, r18
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	06 c0       	rjmp	.+12     	; 0x71e <UART_Send+0x44>
 712:	8c e2       	ldi	r24, 0x2C	; 44
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	29 81       	ldd	r18, Y+1	; 0x01
 718:	fc 01       	movw	r30, r24
 71a:	20 83       	st	Z, r18
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0f 90       	pop	r0
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <getUdrValue>:
uint8 getUdrValue(void)
{
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
	
	return UDR;
 72e:	8c e2       	ldi	r24, 0x2C	; 44
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	fc 01       	movw	r30, r24
 734:	80 81       	ld	r24, Z
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <__subsf3>:
 73c:	50 58       	subi	r21, 0x80	; 128

0000073e <__addsf3>:
 73e:	bb 27       	eor	r27, r27
 740:	aa 27       	eor	r26, r26
 742:	0e 94 b6 03 	call	0x76c	; 0x76c <__addsf3x>
 746:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 74a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 74e:	38 f0       	brcs	.+14     	; 0x75e <__addsf3+0x20>
 750:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 754:	20 f0       	brcs	.+8      	; 0x75e <__addsf3+0x20>
 756:	39 f4       	brne	.+14     	; 0x766 <__addsf3+0x28>
 758:	9f 3f       	cpi	r25, 0xFF	; 255
 75a:	19 f4       	brne	.+6      	; 0x762 <__addsf3+0x24>
 75c:	26 f4       	brtc	.+8      	; 0x766 <__addsf3+0x28>
 75e:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>
 762:	0e f4       	brtc	.+2      	; 0x766 <__addsf3+0x28>
 764:	e0 95       	com	r30
 766:	e7 fb       	bst	r30, 7
 768:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>

0000076c <__addsf3x>:
 76c:	e9 2f       	mov	r30, r25
 76e:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 772:	58 f3       	brcs	.-42     	; 0x74a <__addsf3+0xc>
 774:	ba 17       	cp	r27, r26
 776:	62 07       	cpc	r22, r18
 778:	73 07       	cpc	r23, r19
 77a:	84 07       	cpc	r24, r20
 77c:	95 07       	cpc	r25, r21
 77e:	20 f0       	brcs	.+8      	; 0x788 <__addsf3x+0x1c>
 780:	79 f4       	brne	.+30     	; 0x7a0 <__addsf3x+0x34>
 782:	a6 f5       	brtc	.+104    	; 0x7ec <__addsf3x+0x80>
 784:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_zero>
 788:	0e f4       	brtc	.+2      	; 0x78c <__addsf3x+0x20>
 78a:	e0 95       	com	r30
 78c:	0b 2e       	mov	r0, r27
 78e:	ba 2f       	mov	r27, r26
 790:	a0 2d       	mov	r26, r0
 792:	0b 01       	movw	r0, r22
 794:	b9 01       	movw	r22, r18
 796:	90 01       	movw	r18, r0
 798:	0c 01       	movw	r0, r24
 79a:	ca 01       	movw	r24, r20
 79c:	a0 01       	movw	r20, r0
 79e:	11 24       	eor	r1, r1
 7a0:	ff 27       	eor	r31, r31
 7a2:	59 1b       	sub	r21, r25
 7a4:	99 f0       	breq	.+38     	; 0x7cc <__addsf3x+0x60>
 7a6:	59 3f       	cpi	r21, 0xF9	; 249
 7a8:	50 f4       	brcc	.+20     	; 0x7be <__addsf3x+0x52>
 7aa:	50 3e       	cpi	r21, 0xE0	; 224
 7ac:	68 f1       	brcs	.+90     	; 0x808 <__addsf3x+0x9c>
 7ae:	1a 16       	cp	r1, r26
 7b0:	f0 40       	sbci	r31, 0x00	; 0
 7b2:	a2 2f       	mov	r26, r18
 7b4:	23 2f       	mov	r18, r19
 7b6:	34 2f       	mov	r19, r20
 7b8:	44 27       	eor	r20, r20
 7ba:	58 5f       	subi	r21, 0xF8	; 248
 7bc:	f3 cf       	rjmp	.-26     	; 0x7a4 <__addsf3x+0x38>
 7be:	46 95       	lsr	r20
 7c0:	37 95       	ror	r19
 7c2:	27 95       	ror	r18
 7c4:	a7 95       	ror	r26
 7c6:	f0 40       	sbci	r31, 0x00	; 0
 7c8:	53 95       	inc	r21
 7ca:	c9 f7       	brne	.-14     	; 0x7be <__addsf3x+0x52>
 7cc:	7e f4       	brtc	.+30     	; 0x7ec <__addsf3x+0x80>
 7ce:	1f 16       	cp	r1, r31
 7d0:	ba 0b       	sbc	r27, r26
 7d2:	62 0b       	sbc	r22, r18
 7d4:	73 0b       	sbc	r23, r19
 7d6:	84 0b       	sbc	r24, r20
 7d8:	ba f0       	brmi	.+46     	; 0x808 <__addsf3x+0x9c>
 7da:	91 50       	subi	r25, 0x01	; 1
 7dc:	a1 f0       	breq	.+40     	; 0x806 <__addsf3x+0x9a>
 7de:	ff 0f       	add	r31, r31
 7e0:	bb 1f       	adc	r27, r27
 7e2:	66 1f       	adc	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	c2 f7       	brpl	.-16     	; 0x7da <__addsf3x+0x6e>
 7ea:	0e c0       	rjmp	.+28     	; 0x808 <__addsf3x+0x9c>
 7ec:	ba 0f       	add	r27, r26
 7ee:	62 1f       	adc	r22, r18
 7f0:	73 1f       	adc	r23, r19
 7f2:	84 1f       	adc	r24, r20
 7f4:	48 f4       	brcc	.+18     	; 0x808 <__addsf3x+0x9c>
 7f6:	87 95       	ror	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	b7 95       	ror	r27
 7fe:	f7 95       	ror	r31
 800:	9e 3f       	cpi	r25, 0xFE	; 254
 802:	08 f0       	brcs	.+2      	; 0x806 <__addsf3x+0x9a>
 804:	b0 cf       	rjmp	.-160    	; 0x766 <__addsf3+0x28>
 806:	93 95       	inc	r25
 808:	88 0f       	add	r24, r24
 80a:	08 f0       	brcs	.+2      	; 0x80e <__addsf3x+0xa2>
 80c:	99 27       	eor	r25, r25
 80e:	ee 0f       	add	r30, r30
 810:	97 95       	ror	r25
 812:	87 95       	ror	r24
 814:	08 95       	ret

00000816 <__divsf3>:
 816:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3x>
 81a:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 81e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 822:	58 f0       	brcs	.+22     	; 0x83a <__divsf3+0x24>
 824:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 828:	40 f0       	brcs	.+16     	; 0x83a <__divsf3+0x24>
 82a:	29 f4       	brne	.+10     	; 0x836 <__divsf3+0x20>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	29 f0       	breq	.+10     	; 0x83a <__divsf3+0x24>
 830:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 834:	51 11       	cpse	r21, r1
 836:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 83a:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>

0000083e <__divsf3x>:
 83e:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 842:	68 f3       	brcs	.-38     	; 0x81e <__divsf3+0x8>

00000844 <__divsf3_pse>:
 844:	99 23       	and	r25, r25
 846:	b1 f3       	breq	.-20     	; 0x834 <__divsf3+0x1e>
 848:	55 23       	and	r21, r21
 84a:	91 f3       	breq	.-28     	; 0x830 <__divsf3+0x1a>
 84c:	95 1b       	sub	r25, r21
 84e:	55 0b       	sbc	r21, r21
 850:	bb 27       	eor	r27, r27
 852:	aa 27       	eor	r26, r26
 854:	62 17       	cp	r22, r18
 856:	73 07       	cpc	r23, r19
 858:	84 07       	cpc	r24, r20
 85a:	38 f0       	brcs	.+14     	; 0x86a <__stack+0xb>
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	44 1f       	adc	r20, r20
 866:	aa 1f       	adc	r26, r26
 868:	a9 f3       	breq	.-22     	; 0x854 <__divsf3_pse+0x10>
 86a:	35 d0       	rcall	.+106    	; 0x8d6 <__stack+0x77>
 86c:	0e 2e       	mov	r0, r30
 86e:	3a f0       	brmi	.+14     	; 0x87e <__stack+0x1f>
 870:	e0 e8       	ldi	r30, 0x80	; 128
 872:	32 d0       	rcall	.+100    	; 0x8d8 <__stack+0x79>
 874:	91 50       	subi	r25, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	e6 95       	lsr	r30
 87a:	00 1c       	adc	r0, r0
 87c:	ca f7       	brpl	.-14     	; 0x870 <__stack+0x11>
 87e:	2b d0       	rcall	.+86     	; 0x8d6 <__stack+0x77>
 880:	fe 2f       	mov	r31, r30
 882:	29 d0       	rcall	.+82     	; 0x8d6 <__stack+0x77>
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	26 17       	cp	r18, r22
 88e:	37 07       	cpc	r19, r23
 890:	48 07       	cpc	r20, r24
 892:	ab 07       	cpc	r26, r27
 894:	b0 e8       	ldi	r27, 0x80	; 128
 896:	09 f0       	breq	.+2      	; 0x89a <__stack+0x3b>
 898:	bb 0b       	sbc	r27, r27
 89a:	80 2d       	mov	r24, r0
 89c:	bf 01       	movw	r22, r30
 89e:	ff 27       	eor	r31, r31
 8a0:	93 58       	subi	r25, 0x83	; 131
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	3a f0       	brmi	.+14     	; 0x8b4 <__stack+0x55>
 8a6:	9e 3f       	cpi	r25, 0xFE	; 254
 8a8:	51 05       	cpc	r21, r1
 8aa:	78 f0       	brcs	.+30     	; 0x8ca <__stack+0x6b>
 8ac:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 8b0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 8b4:	5f 3f       	cpi	r21, 0xFF	; 255
 8b6:	e4 f3       	brlt	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	98 3e       	cpi	r25, 0xE8	; 232
 8ba:	d4 f3       	brlt	.-12     	; 0x8b0 <__stack+0x51>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b7 95       	ror	r27
 8c4:	f7 95       	ror	r31
 8c6:	9f 5f       	subi	r25, 0xFF	; 255
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__stack+0x5d>
 8ca:	88 0f       	add	r24, r24
 8cc:	91 1d       	adc	r25, r1
 8ce:	96 95       	lsr	r25
 8d0:	87 95       	ror	r24
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret
 8d6:	e1 e0       	ldi	r30, 0x01	; 1
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	62 17       	cp	r22, r18
 8e2:	73 07       	cpc	r23, r19
 8e4:	84 07       	cpc	r24, r20
 8e6:	ba 07       	cpc	r27, r26
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__stack+0x93>
 8ea:	62 1b       	sub	r22, r18
 8ec:	73 0b       	sbc	r23, r19
 8ee:	84 0b       	sbc	r24, r20
 8f0:	ba 0b       	sbc	r27, r26
 8f2:	ee 1f       	adc	r30, r30
 8f4:	88 f7       	brcc	.-30     	; 0x8d8 <__stack+0x79>
 8f6:	e0 95       	com	r30
 8f8:	08 95       	ret

000008fa <__fixunssfsi>:
 8fa:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_splitA>
 8fe:	88 f0       	brcs	.+34     	; 0x922 <__fixunssfsi+0x28>
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	98 f0       	brcs	.+38     	; 0x92a <__fixunssfsi+0x30>
 904:	b9 2f       	mov	r27, r25
 906:	99 27       	eor	r25, r25
 908:	b7 51       	subi	r27, 0x17	; 23
 90a:	b0 f0       	brcs	.+44     	; 0x938 <__fixunssfsi+0x3e>
 90c:	e1 f0       	breq	.+56     	; 0x946 <__fixunssfsi+0x4c>
 90e:	66 0f       	add	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	1a f0       	brmi	.+6      	; 0x91e <__fixunssfsi+0x24>
 918:	ba 95       	dec	r27
 91a:	c9 f7       	brne	.-14     	; 0x90e <__fixunssfsi+0x14>
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__fixunssfsi+0x4c>
 91e:	b1 30       	cpi	r27, 0x01	; 1
 920:	91 f0       	breq	.+36     	; 0x946 <__fixunssfsi+0x4c>
 922:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_zero>
 926:	b1 e0       	ldi	r27, 0x01	; 1
 928:	08 95       	ret
 92a:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_zero>
 92e:	67 2f       	mov	r22, r23
 930:	78 2f       	mov	r23, r24
 932:	88 27       	eor	r24, r24
 934:	b8 5f       	subi	r27, 0xF8	; 248
 936:	39 f0       	breq	.+14     	; 0x946 <__fixunssfsi+0x4c>
 938:	b9 3f       	cpi	r27, 0xF9	; 249
 93a:	cc f3       	brlt	.-14     	; 0x92e <__fixunssfsi+0x34>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b3 95       	inc	r27
 944:	d9 f7       	brne	.-10     	; 0x93c <__fixunssfsi+0x42>
 946:	3e f4       	brtc	.+14     	; 0x956 <__fixunssfsi+0x5c>
 948:	90 95       	com	r25
 94a:	80 95       	com	r24
 94c:	70 95       	com	r23
 94e:	61 95       	neg	r22
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__floatunsisf>:
 958:	e8 94       	clt
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
 95c:	97 fb       	bst	r25, 7
 95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
 960:	90 95       	com	r25
 962:	80 95       	com	r24
 964:	70 95       	com	r23
 966:	61 95       	neg	r22
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	99 23       	and	r25, r25
 970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
 972:	f9 2f       	mov	r31, r25
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	bb 27       	eor	r27, r27
 978:	93 95       	inc	r25
 97a:	f6 95       	lsr	r31
 97c:	87 95       	ror	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f1 11       	cpse	r31, r1
 986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
 988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
 98a:	bb 0f       	add	r27, r27
 98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
 98e:	60 ff       	sbrs	r22, 0
 990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
 99c:	88 23       	and	r24, r24
 99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
 9a4:	77 23       	and	r23, r23
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
 9a8:	9e e8       	ldi	r25, 0x8E	; 142
 9aa:	87 2f       	mov	r24, r23
 9ac:	76 2f       	mov	r23, r22
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
 9b0:	66 23       	and	r22, r22
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
 9b4:	96 e8       	ldi	r25, 0x86	; 134
 9b6:	86 2f       	mov	r24, r22
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
 9be:	9a 95       	dec	r25
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
 9c8:	88 0f       	add	r24, r24
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <__fp_inf>:
 9d2:	97 f9       	bld	r25, 7
 9d4:	9f 67       	ori	r25, 0x7F	; 127
 9d6:	80 e8       	ldi	r24, 0x80	; 128
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	08 95       	ret

000009de <__fp_nan>:
 9de:	9f ef       	ldi	r25, 0xFF	; 255
 9e0:	80 ec       	ldi	r24, 0xC0	; 192
 9e2:	08 95       	ret

000009e4 <__fp_pscA>:
 9e4:	00 24       	eor	r0, r0
 9e6:	0a 94       	dec	r0
 9e8:	16 16       	cp	r1, r22
 9ea:	17 06       	cpc	r1, r23
 9ec:	18 06       	cpc	r1, r24
 9ee:	09 06       	cpc	r0, r25
 9f0:	08 95       	ret

000009f2 <__fp_pscB>:
 9f2:	00 24       	eor	r0, r0
 9f4:	0a 94       	dec	r0
 9f6:	12 16       	cp	r1, r18
 9f8:	13 06       	cpc	r1, r19
 9fa:	14 06       	cpc	r1, r20
 9fc:	05 06       	cpc	r0, r21
 9fe:	08 95       	ret

00000a00 <__fp_round>:
 a00:	09 2e       	mov	r0, r25
 a02:	03 94       	inc	r0
 a04:	00 0c       	add	r0, r0
 a06:	11 f4       	brne	.+4      	; 0xa0c <__fp_round+0xc>
 a08:	88 23       	and	r24, r24
 a0a:	52 f0       	brmi	.+20     	; 0xa20 <__fp_round+0x20>
 a0c:	bb 0f       	add	r27, r27
 a0e:	40 f4       	brcc	.+16     	; 0xa20 <__fp_round+0x20>
 a10:	bf 2b       	or	r27, r31
 a12:	11 f4       	brne	.+4      	; 0xa18 <__fp_round+0x18>
 a14:	60 ff       	sbrs	r22, 0
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__fp_round+0x20>
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	08 95       	ret

00000a22 <__fp_split3>:
 a22:	57 fd       	sbrc	r21, 7
 a24:	90 58       	subi	r25, 0x80	; 128
 a26:	44 0f       	add	r20, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	59 f0       	breq	.+22     	; 0xa42 <__fp_splitA+0x10>
 a2c:	5f 3f       	cpi	r21, 0xFF	; 255
 a2e:	71 f0       	breq	.+28     	; 0xa4c <__fp_splitA+0x1a>
 a30:	47 95       	ror	r20

00000a32 <__fp_splitA>:
 a32:	88 0f       	add	r24, r24
 a34:	97 fb       	bst	r25, 7
 a36:	99 1f       	adc	r25, r25
 a38:	61 f0       	breq	.+24     	; 0xa52 <__fp_splitA+0x20>
 a3a:	9f 3f       	cpi	r25, 0xFF	; 255
 a3c:	79 f0       	breq	.+30     	; 0xa5c <__fp_splitA+0x2a>
 a3e:	87 95       	ror	r24
 a40:	08 95       	ret
 a42:	12 16       	cp	r1, r18
 a44:	13 06       	cpc	r1, r19
 a46:	14 06       	cpc	r1, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	f2 cf       	rjmp	.-28     	; 0xa30 <__fp_split3+0xe>
 a4c:	46 95       	lsr	r20
 a4e:	f1 df       	rcall	.-30     	; 0xa32 <__fp_splitA>
 a50:	08 c0       	rjmp	.+16     	; 0xa62 <__fp_splitA+0x30>
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	f1 cf       	rjmp	.-30     	; 0xa3e <__fp_splitA+0xc>
 a5c:	86 95       	lsr	r24
 a5e:	71 05       	cpc	r23, r1
 a60:	61 05       	cpc	r22, r1
 a62:	08 94       	sec
 a64:	08 95       	ret

00000a66 <__fp_zero>:
 a66:	e8 94       	clt

00000a68 <__fp_szero>:
 a68:	bb 27       	eor	r27, r27
 a6a:	66 27       	eor	r22, r22
 a6c:	77 27       	eor	r23, r23
 a6e:	cb 01       	movw	r24, r22
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__mulsf3>:
 a74:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__mulsf3x>
 a78:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_round>
 a7c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fp_pscA>
 a80:	38 f0       	brcs	.+14     	; 0xa90 <__mulsf3+0x1c>
 a82:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_pscB>
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__mulsf3+0x1c>
 a88:	95 23       	and	r25, r21
 a8a:	11 f0       	breq	.+4      	; 0xa90 <__mulsf3+0x1c>
 a8c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 a90:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_nan>
 a94:	11 24       	eor	r1, r1
 a96:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>

00000a9a <__mulsf3x>:
 a9a:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_split3>
 a9e:	70 f3       	brcs	.-36     	; 0xa7c <__mulsf3+0x8>

00000aa0 <__mulsf3_pse>:
 aa0:	95 9f       	mul	r25, r21
 aa2:	c1 f3       	breq	.-16     	; 0xa94 <__mulsf3+0x20>
 aa4:	95 0f       	add	r25, r21
 aa6:	50 e0       	ldi	r21, 0x00	; 0
 aa8:	55 1f       	adc	r21, r21
 aaa:	62 9f       	mul	r22, r18
 aac:	f0 01       	movw	r30, r0
 aae:	72 9f       	mul	r23, r18
 ab0:	bb 27       	eor	r27, r27
 ab2:	f0 0d       	add	r31, r0
 ab4:	b1 1d       	adc	r27, r1
 ab6:	63 9f       	mul	r22, r19
 ab8:	aa 27       	eor	r26, r26
 aba:	f0 0d       	add	r31, r0
 abc:	b1 1d       	adc	r27, r1
 abe:	aa 1f       	adc	r26, r26
 ac0:	64 9f       	mul	r22, r20
 ac2:	66 27       	eor	r22, r22
 ac4:	b0 0d       	add	r27, r0
 ac6:	a1 1d       	adc	r26, r1
 ac8:	66 1f       	adc	r22, r22
 aca:	82 9f       	mul	r24, r18
 acc:	22 27       	eor	r18, r18
 ace:	b0 0d       	add	r27, r0
 ad0:	a1 1d       	adc	r26, r1
 ad2:	62 1f       	adc	r22, r18
 ad4:	73 9f       	mul	r23, r19
 ad6:	b0 0d       	add	r27, r0
 ad8:	a1 1d       	adc	r26, r1
 ada:	62 1f       	adc	r22, r18
 adc:	83 9f       	mul	r24, r19
 ade:	a0 0d       	add	r26, r0
 ae0:	61 1d       	adc	r22, r1
 ae2:	22 1f       	adc	r18, r18
 ae4:	74 9f       	mul	r23, r20
 ae6:	33 27       	eor	r19, r19
 ae8:	a0 0d       	add	r26, r0
 aea:	61 1d       	adc	r22, r1
 aec:	23 1f       	adc	r18, r19
 aee:	84 9f       	mul	r24, r20
 af0:	60 0d       	add	r22, r0
 af2:	21 1d       	adc	r18, r1
 af4:	82 2f       	mov	r24, r18
 af6:	76 2f       	mov	r23, r22
 af8:	6a 2f       	mov	r22, r26
 afa:	11 24       	eor	r1, r1
 afc:	9f 57       	subi	r25, 0x7F	; 127
 afe:	50 40       	sbci	r21, 0x00	; 0
 b00:	9a f0       	brmi	.+38     	; 0xb28 <__mulsf3_pse+0x88>
 b02:	f1 f0       	breq	.+60     	; 0xb40 <__mulsf3_pse+0xa0>
 b04:	88 23       	and	r24, r24
 b06:	4a f0       	brmi	.+18     	; 0xb1a <__mulsf3_pse+0x7a>
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	bb 1f       	adc	r27, r27
 b0e:	66 1f       	adc	r22, r22
 b10:	77 1f       	adc	r23, r23
 b12:	88 1f       	adc	r24, r24
 b14:	91 50       	subi	r25, 0x01	; 1
 b16:	50 40       	sbci	r21, 0x00	; 0
 b18:	a9 f7       	brne	.-22     	; 0xb04 <__mulsf3_pse+0x64>
 b1a:	9e 3f       	cpi	r25, 0xFE	; 254
 b1c:	51 05       	cpc	r21, r1
 b1e:	80 f0       	brcs	.+32     	; 0xb40 <__mulsf3_pse+0xa0>
 b20:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 b24:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_szero>
 b28:	5f 3f       	cpi	r21, 0xFF	; 255
 b2a:	e4 f3       	brlt	.-8      	; 0xb24 <__mulsf3_pse+0x84>
 b2c:	98 3e       	cpi	r25, 0xE8	; 232
 b2e:	d4 f3       	brlt	.-12     	; 0xb24 <__mulsf3_pse+0x84>
 b30:	86 95       	lsr	r24
 b32:	77 95       	ror	r23
 b34:	67 95       	ror	r22
 b36:	b7 95       	ror	r27
 b38:	f7 95       	ror	r31
 b3a:	e7 95       	ror	r30
 b3c:	9f 5f       	subi	r25, 0xFF	; 255
 b3e:	c1 f7       	brne	.-16     	; 0xb30 <__mulsf3_pse+0x90>
 b40:	fe 2b       	or	r31, r30
 b42:	88 0f       	add	r24, r24
 b44:	91 1d       	adc	r25, r1
 b46:	96 95       	lsr	r25
 b48:	87 95       	ror	r24
 b4a:	97 f9       	bld	r25, 7
 b4c:	08 95       	ret

00000b4e <_exit>:
 b4e:	f8 94       	cli

00000b50 <__stop_program>:
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <__stop_program>
